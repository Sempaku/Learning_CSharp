using System;
using System.Reflection;

//При создании приложения для него определяется набор сборок, которые будут использоваться.
//В проекте указываются ссылки на эти сборки, и когда приложение выполняется,
//при обращении к функционалу этих сборок они автоматически подгружаются.

//Но также мы можем сами динамически подгружать другие сборки, на которые в проекте нет ссылок.

//Для управления сборками в пространстве имен System.Reflection имеется класс Assembly.
//С его помощью можно загружать сборку, исследовать ее.

namespace Динамическая_загрузка_сборок_и_позднее_связывание
{
    class Program
    {
        static void Main(string[] args)
        {
            Assembly asm = Assembly.LoadFrom(@"C:\Users\79172\Desktop\metanit\Рефлексия\MyApp\bin\Debug\netcoreapp3.1\MyApp.dll");

            Console.WriteLine(asm.FullName);

            Type[] types = asm.GetTypes();
            foreach(var t in types)
                Console.WriteLine(t.Name);


            //_______________________________________________________________________
            Console.WriteLine("___________________________");
            //_______________________________________________________________________
            //Позднее связывание

            //С помощью динамической загрузки мы можем реализовать технологию позднего связывания.
            //Позднее связывание позволяет создавать экземпляры некоторого типа,
            //а также использовать его во время выполнения приложения.

            //Использование позднего связывания менее безопасно в том плане,
            //что при жестком кодировании всех типов(ранее связывание) на этапе компиляции
            //мы можем отследить многие ошибки. В то же время позднее связывание позволяет
            //создавать расширяемые приложения, когда дополнительный функционал программы неизвестен,
            //и его могут разработать и подключить сторонние разработчики.

            //Ключевую роль в позднем связывании играет класс System.Activator.
            //С помощью его статического метода Activator.CreateInstance() можно
            //создавать экземпляры заданного типа.

            Assembly asm2 = Assembly.LoadFrom(@"C:\Users\79172\Desktop\metanit\Рефлексия\My2App\bin\Debug\netcoreapp3.1\My2App.dll");

            Type? type2asm = asm2.GetType("Program");

            if((type2asm != null))
            {
                object? obj = Activator.CreateInstance(type2asm);

                MethodInfo? square = type2asm.GetMethod("Square", BindingFlags.NonPublic | BindingFlags.Static);

                object? result = square?.Invoke(square, new object[] { 100 });
                Console.WriteLine(result);
            }


        }
    }
}
